/*
 * This file is part of the atomic client distribution.
 * Copyright (c) 2021-2021 0x150.
 */

package me.zeroX150.atomic.feature.gui.widget;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.ItemExploits;
import me.zeroX150.atomic.mixin.game.render.ITextFieldAccessor;
import net.minecraft.client.gui.screen.narration.NarrationMessageBuilder;
import net.minecraft.client.gui.widget.ButtonWidget;
import net.minecraft.client.gui.widget.ClickableWidget;
import net.minecraft.client.gui.widget.TextFieldWidget;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.ItemStack;
import net.minecraft.text.Text;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class ItemExploitConfigRenderer extends ClickableWidget {

    final List<TextFieldWidget> options = new ArrayList<>();
    final ButtonWidget          generate;
    int selected = -1;

    public ItemExploitConfigRenderer(ItemExploits.ItemExploit exploit, int x, int y) {
        super(0, 0, 0, 0, Text.of(""));
        int yOffset = exploit.getGenerator().getOptions().length == 0 ? 0 : 5;
        for (ItemExploits.Option option : exploit.getGenerator().getOptions()) {
            TextFieldWidget tfw = new TextFieldWidget(Atomic.client.textRenderer, x, y + yOffset, 150, 20, Text.of("SPECIAL:" + option.getName())) {
                @Override public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {
                    //setFocused(ItemExploitsScreen.this.getFocused() != null && ItemExploitsScreen.this.getFocused().equals(this));
                    if (option.getValueProvider().isInvalid()) {
                        this.setEditableColor(0xFF3C3C);
                    } else {
                        this.setEditableColor(0xFFFFFF);
                    }
                    super.render(matrices, mouseX, mouseY, delta);
                }
            };
            tfw.setMaxLength(65535);
            tfw.setText(option.getValue());
            tfw.setChangedListener(s -> option.getValueProvider().setValue(tfw.getText()));
            options.add(tfw);
            yOffset += 25;
        }
        generate = new ButtonWidget(x, y + yOffset, 150, 20, Text.of("Generate"), button -> {
            ItemStack stack = exploit.getGenerator().exploit();
            if (stack != null) {
                Objects.requireNonNull(Atomic.client.player).getInventory().addPickBlock(stack);
            }
        });
        height = yOffset + 20;
    }

    @Override public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {
        super.render(matrices, mouseX, mouseY, delta);
        for (ClickableWidget option : options) {
            option.render(matrices, mouseX, mouseY, delta);
        }
        generate.render(matrices, mouseX, mouseY, delta);
    }

    @Override public boolean mouseClicked(double mouseX, double mouseY, int button) {
        int ii = 0;
        for (ClickableWidget option : options) {
            //option.mouseClicked(-100,-100,button); // to tell him to fuck off when we deselect it
            option.mouseClicked(mouseX, mouseY, button);
            ((ITextFieldAccessor) option).onFocusChanged(option.isFocused());
            if (option.isFocused()) {
                selected = ii;
            }
            ii++;
        }
        generate.mouseClicked(mouseX, mouseY, button);
        return super.mouseClicked(mouseX, mouseY, button);
    }

    @Override public boolean charTyped(char chr, int modifiers) {
        if (selected != -1) {
            options.get(selected).charTyped(chr, modifiers);
            return true;
        }
        return super.charTyped(chr, modifiers);
    }

    @Override public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
        if (selected != -1) {
            options.get(selected).keyPressed(keyCode, scanCode, modifiers);
        }
        return super.keyPressed(keyCode, scanCode, modifiers);
    }

    @Override public boolean keyReleased(int keyCode, int scanCode, int modifiers) {
        if (selected != -1) {
            options.get(selected).keyReleased(keyCode, scanCode, modifiers);
        }
        return super.keyReleased(keyCode, scanCode, modifiers);
    }

    public void tick() {
        if (selected != -1) {
            options.get(selected).tick();
        }
    }

    @Override public void appendNarrations(NarrationMessageBuilder builder) {

    }
}
