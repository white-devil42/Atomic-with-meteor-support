/*
 * This file is part of the atomic client distribution.
 * Copyright (c) 2021-2021 0x150.
 */

package me.zeroX150.atomic.feature;

import imgui.type.ImString;
import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.ModuleRegistry;
import me.zeroX150.atomic.feature.module.impl.exploit.HologramAura;
import me.zeroX150.atomic.helper.util.ChatFormatting;
import me.zeroX150.atomic.helper.util.Utils;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.entity.attribute.EntityAttributeModifier;
import net.minecraft.entity.attribute.EntityAttributes;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtByte;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtDouble;
import net.minecraft.nbt.NbtFloat;
import net.minecraft.nbt.NbtInt;
import net.minecraft.nbt.NbtIntArray;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.nbt.StringNbtReader;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.registry.Registry;
import org.jetbrains.annotations.NotNull;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

public class ItemExploits {

    public static ItemStack markStack(ItemStack stack, String name) {
        stack.setCustomName(Text.of(ChatFormatting.format("<white>" + name + " <reset><white>| <red>Atomic")));
        return stack;
    }

    public enum ItemExploit {
        HOLOGRAM_AURA("Hologram aura", new ExploitGenerator() {
            final Option name = new Option("Hologram content");
            final Option url = new Option("Image URL");

            @Override public ItemStack exploit() {
                String n = name.getValue();
                String c = url.getValue();
                HologramAura hga = ModuleRegistry.getByClass(HologramAura.class);
                if (hga.mode.getValue().equalsIgnoreCase("image") && c.isEmpty()) {
                    url.getValueProvider().markInvalid();
                    name.getValueProvider().resetInvalid();
                    return null;
                } else if (!hga.mode.getValue().equalsIgnoreCase("image") && n.isEmpty()) {
                    name.getValueProvider().markInvalid();
                    url.getValueProvider().resetInvalid();
                    return null;
                }
                url.getValueProvider().resetInvalid();
                name.getValueProvider().resetInvalid();
                HologramAura.argument = c;
                HologramAura.text = n;
                hga.setEnabled(true);
                return null;
            }

            @Override public Option[] getOptions() {
                return new Option[]{name, url};
            }

            @Override public @NotNull String getDescription() {
                return "Spawns a metric ton of holograms";
            }
        }), FIREBALL("Big fireball", new ExploitGenerator() {
            final Option v = new Option("Strength (INT)");

            @Override public ItemStack exploit() {
                int v1 = Utils.Math.tryParseInt(v.getValue(), -1);
                if (v1 < 0) {
                    v.getValueProvider().markInvalid();
                    return null;
                } else {
                    v.getValueProvider().resetInvalid();
                }
                ItemStack stack = new ItemStack(Items.COW_SPAWN_EGG);
                markStack(stack, ":)");
                NbtCompound compound = stack.getOrCreateSubNbt("EntityTag");
                compound.put("id", NbtString.of("minecraft:fireball"));
                compound.put("ExplosionPower", NbtDouble.of(v1));

                return stack;
            }

            @Override public Option[] getOptions() {
                return new Option[]{v};
            }


            @Override public @NotNull String getDescription() {
                return "Makes a big fireball";
            }
        }), BLOCKBAN("Blockban", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.COW_SPAWN_EGG);
                markStack(stack, "Whats this?");
                NbtCompound compound = stack.getOrCreateSubNbt("EntityTag");
                compound.put("id", NbtString.of("minecraft:area_effect_cloud"));
                compound.put("Particle", NbtString.of("minecraft:barrier"));
                compound.put("RadiusPerTick", NbtFloat.of(0f));
                compound.put("Duration", NbtInt.of(1310700));
                compound.put("WaitTime", NbtInt.of(60));
                return stack;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "Makes a ton of particles";
            }
        }), LAGMOR_STAND("Lagmor stand", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.ARMOR_STAND);
                markStack(itemStack, "Lagmor stand");
                NbtCompound compoundTag = itemStack.getOrCreateSubNbt("EntityTag");
                compoundTag.put("CustomName", NbtString.of("\"" + "0".repeat(32000) + "\""));
                compoundTag.put("CustomNameVisible", NbtByte.of(true));
                return itemStack;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "Really big armor stand";
            }
        }), NO_MOVE_HELMET("Troll helmet", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.LEATHER_HELMET);
                itemStack.addAttributeModifier(EntityAttributes.GENERIC_MOVEMENT_SPEED, new EntityAttributeModifier(UUID.nameUUIDFromBytes(new byte[]{(byte) 1772998660, (byte) 874858241,
                        (byte) -1911483451, (byte) 795787135}), "generic.movement_speed", Double.NaN, EntityAttributeModifier.Operation.fromId(0)), EquipmentSlot.HEAD);
                NbtCompound compoundTag = itemStack.getOrCreateNbt();
                compoundTag.put("HideFlags", NbtInt.of(71));
                compoundTag.put("Unbreakable", NbtByte.of(true));
                itemStack.addEnchantment(Enchantments.PROTECTION, 1);
                markStack(itemStack, "Troll helmet");
                return itemStack;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "makes you unable to move";
            }
        }), NO_ENTITY_KILL("NoKill", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.BAT_SPAWN_EGG);
                markStack(itemStack, "Funny minecart");
                NbtCompound compoundTag = itemStack.getOrCreateNbt();
                NbtCompound compoundTag1 = new NbtCompound();
                compoundTag1.put("LootTable", NbtString.of(""));
                compoundTag1.putString("id", "minecraft:chest_minecart");
                compoundTag1.putByte("Invulnerable", (byte) 1);
                compoundTag1.putByte("Invisible", (byte) 1);
                compoundTag1.putByte("NoGravity", (byte) 1);
                compoundTag.put("EntityTag", compoundTag1);
                return itemStack;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "You cant kill or use this, /kill included";
            }
        }), BIG_FIREWORK("Big firework", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack is = new ItemStack(Items.FIREWORK_ROCKET);
                markStack(is, "Big firework");
                is.getOrCreateNbt().put("HideFlags", NbtInt.of(32));
                NbtCompound fireworks = is.getOrCreateSubNbt("Fireworks");
                fireworks.put("Flight", NbtInt.of(1));
                NbtList explosions = new NbtList();
                for (int i = 0; i < 100; i++) {
                    NbtIntArray colors = new NbtIntArray(new int[0]);
                    for (int ii = 0; ii < 20; ii++) {
                        colors.add(NbtInt.of((int) Math.floor(Math.random() * 0xFFFFFF)));
                    }
                    NbtCompound current = new NbtCompound();
                    current.put("Type", NbtInt.of((int) Math.floor(Math.random() * 4)));
                    current.put("Flicker", NbtInt.of(1));
                    current.put("Trail", NbtInt.of(1));
                    current.put("Colors", colors);
                    explosions.add(current);
                }
                fireworks.put("Explosions", explosions);
                return is;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "big firework";
            }
        }), EXECUTOR_BOOK("ExecBook", new ExploitGenerator() {
            final Option title = new Option("Title");
            final Option author = new Option("Author");
            final Option text = new Option("Text");
            final Option command = new Option("Command");

            @Override public ItemStack exploit() {
                String title = this.title.getValue().isEmpty() ? "Open me" : this.title.getValue();
                String author = this.author.getValue().isEmpty() ? Objects.requireNonNull(Atomic.client.player).getGameProfile().getName() : this.author.getValue();
                String text = this.text.getValue();
                String command = this.command.getValue();
                if (command.isEmpty()) {
                    this.command.getValueProvider().markInvalid();
                    return null;
                } else {
                    this.command.getValueProvider().resetInvalid();
                }
                ItemStack book = new ItemStack(Items.WRITTEN_BOOK);
                NbtCompound tag = book.getOrCreateNbt();
                tag.put("title", NbtString.of(title));
                tag.put("author", NbtString.of(author));
                NbtList pages = new NbtList();
                pages.add(NbtString.of("{\"text\":\"" + (text + " ".repeat(500)) + "\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"" + command + "\"}}"));
                pages.add(NbtString.of("{\"text\":\"\"}"));
                tag.put("pages", pages);
                book.setNbt(tag);
                return book;
            }

            @Override public Option[] getOptions() {
                return new Option[]{title, author, text, command};
            }


            @Override public boolean rendersPreview() {
                return true;
            }

            @Override public @NotNull String getDescription() {
                return "makes a book that runs a command when clicked";
            }
        }), INF_SPAWNEGG("Inf spawn egg", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                Vec3d ppos = Objects.requireNonNull(Atomic.client.player).getPos();
                ItemStack is = new ItemStack(Items.COW_SPAWN_EGG);
                NbtCompound c = new NbtCompound();
                NbtList l = new NbtList();
                l.add(NbtDouble.of(ppos.x));
                l.add(NbtDouble.of(Double.POSITIVE_INFINITY));
                l.add(NbtDouble.of(ppos.z));
                c.put("Pos", l);
                is.setSubNbt("EntityTag", c);
                markStack(is, "Infinity egg");
                return is;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "just makes an entity spawn at y=Inf";
            }
        }), CUSTOM_META("Custom meta", new ExploitGenerator() {
            final Option itemName = new Option("Item ID");
            final Option nbt = new Option("Custom NBT");

            @Override public ItemStack exploit() {
                Item i = Registry.ITEM.get(new Identifier(itemName.getValue()));
                if (i == Items.AIR) {
                    itemName.getValueProvider().markInvalid();
                    return null;
                } else {
                    itemName.getValueProvider().resetInvalid();
                }
                ItemStack stack = new ItemStack(i);
                String v = nbt.getValue().isEmpty() ? "{}" : nbt.getValue();
                try {
                    NbtCompound comp = StringNbtReader.parse(v);
                    nbt.getValueProvider().resetInvalid();
                    stack.setNbt(comp);
                } catch (Exception ignored) {
                    nbt.getValueProvider().markInvalid();
                    return null;
                }
                return stack;
            }

            @Override public Option[] getOptions() {
                return new Option[]{itemName, nbt};
            }


            @Override public @NotNull String getDescription() {
                return "Makes an item with custom nbt";
            }
        }), SERVER_CRASH_TRADER("Crash Trader", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack spawn = Utils.generateItemStackWithMeta("{Offers:{Recipes:[{buyB:{id:\"minecraft:dirt\",Count:1b},sell:{id:\"minecraft:stick\",Count:1b}}]},NoAI:1b}", Items.WANDERING_TRADER_SPAWN_EGG);
                markStack(spawn, "Funny trader");
                return spawn;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "Trade with the trader to crash the server (Paper only, fixed in latest)";
            }
        }), CUM_POTION("CUM POTION", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.SPLASH_POTION);
                markStack(stack, "<red>THE <green>CUM <red>BEAST");
                NbtCompound c = stack.getOrCreateNbt();
                NbtList effects = new NbtList();
                for (int i = 0; i < 33; i++) {
                    NbtCompound exploit = new NbtCompound();
                    exploit.putByte("Id", (byte) i);
                    exploit.putByte("Amplifier", (byte) 124);
                    exploit.putInt("Duration", 80);
                    effects.add(exploit);
                }
                c.put("CustomPotionEffects", effects);
                c.putLong("CustomPotionColor", 16777215);
                //c.putString("Potion", "minecraft:speed");
                return stack;

            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }

            final Identifier CUM = new Identifier("atomic", "cum_beast.png");

            @Override public boolean rendersPreview() {
                return true;
            }

            @Override public @NotNull String getDescription() {
                return "THE CUM BEAST";
            }
        }), PISS_POTION("PISS POTION", new ExploitGenerator() {
            @Override public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.SPLASH_POTION);
                markStack(stack, "<yellow>THE PISS BEAST");
                NbtCompound c = stack.getOrCreateNbt();
                NbtList effects = new NbtList();
                NbtCompound exploit = new NbtCompound();
                exploit.putByte("Id", (byte) 6);
                exploit.putByte("Amplifier", (byte) 125);
                effects.add(exploit);
                c.put("CustomPotionEffects", effects);
                c.putLong("CustomPotionColor", 15859502L);
                c.putInt("HideFlags", 127);
                return stack;
            }

            @Override public Option[] getOptions() {
                return new Option[0];
            }


            @Override public @NotNull String getDescription() {
                return "instakill creative mode players";
            }
        }), COMMAND_SIGN("Command sign", new ExploitGenerator() {
            final Option line1 = new Option("Line 1");
            final Option line2 = new Option("Line 2");
            final Option line3 = new Option("Line 3");
            final Option line4 = new Option("Line 4");
            final Option command1 = new Option("Command 1");
            final Option command2 = new Option("Command 2 (optional)");
            final Option command3 = new Option("Command 3 (optional)");
            final Option command4 = new Option("Command 4 (optional)");

            @Override public ItemStack exploit() {
                if (command1.getValue().isEmpty()) {
                    command1.getValueProvider().markInvalid();
                    return null;
                }
                command1.getValueProvider().resetInvalid();
                String text1 = "";
                text1 += "\"text\":\"" + line1.getValue().replaceAll("&", ChatFormatting.CONTROL.toString()) + "\"";
                if (!command1.getValue().isEmpty()) {
                    text1 += ",\"clickEvent\": {\"action\": \"run_command\",\"value\":\"" + command1.getValue() + "\"}";
                }
                String text2 = "";
                text2 += "\"text\":\"" + line2.getValue().replaceAll("&", ChatFormatting.CONTROL.toString()) + "\"";
                if (!command2.getValue().isEmpty()) {
                    text2 += ",\"clickEvent\": {\"action\": \"run_command\",\"value\":\"" + command2.getValue() + "\"}";
                }
                String text3 = "";
                text3 += "\"text\":\"" + line3.getValue().replaceAll("&", ChatFormatting.CONTROL.toString()) + "\"";
                if (!command3.getValue().isEmpty()) {
                    text3 += ",\"clickEvent\": {\"action\": \"run_command\",\"value\":\"" + command3.getValue() + "\"}";
                }
                String text4 = "";
                text4 += "\"text\":\"" + line4.getValue().replaceAll("&", ChatFormatting.CONTROL.toString()) + "\"";
                if (!command4.getValue().isEmpty()) {
                    text4 += ",\"clickEvent\": {\"action\": \"run_command\",\"value\":\"" + command4.getValue() + "\"}";
                }

                NbtCompound finalN = new NbtCompound();
                finalN.putString("Text1", "{" + text1 + "}");
                finalN.putString("Text2", "{" + text2 + "}");
                finalN.putString("Text3", "{" + text3 + "}");
                finalN.putString("Text4", "{" + text4 + "}");
                ItemStack s = new ItemStack(Items.OAK_SIGN);
                s.setSubNbt("BlockEntityTag", finalN);
                return s;
            }

            @Override public @NotNull String getDescription() {
                return "Makes a sign that runs commands when interacted with";
            }
        });


        final String           name;
        final ExploitGenerator generator;

        ItemExploit(String name, ExploitGenerator generator) {
            this.name = name;
            this.generator = generator;
        }

        public ExploitGenerator getGenerator() {
            return generator;
        }

        public String getName() {
            return name;
        }
    }

    public interface ExploitGenerator {

        ItemStack exploit();

        default Option[] getOptions() {
            try {
                List<Option> options = new ArrayList<>();
                for (Field field : this.getClass().getDeclaredFields()) {
                    field.setAccessible(true);
                    if (field.get(this) instanceof Option e) {
                        options.add(e);
                    }
                }
                return options.toArray(new Option[0]);
            } catch (Exception e) {
                e.printStackTrace();
                return new Option[0];
            }
        }

        //        void renderPreview(MatrixStack stack, int renderWidth, int renderHeight);

        @NotNull String getDescription();

        default boolean rendersPreview() {
            return false;
        }

    }

    public static class Option {

        final String              name;
        final OptionValueProvider valueProvider = new OptionValueProvider();

        public Option(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public OptionValueProvider getValueProvider() {
            return valueProvider;
        }

        public String getValue() {
            return getValueProvider().getValue().get();
        }
    }

    public static class OptionValueProvider {

        ImString val     = new ImString();
        //        String  value   = "";
        boolean  invalid = false;

        public ImString getValue() {
            return val;
        }

        public void setValue(String nv) {
            this.val.set(nv);
        }

        public void markInvalid() {
            invalid = true;
        }

        public void resetInvalid() {
            invalid = false;
        }

        public boolean isInvalid() {
            return invalid;
        }
    }
}
