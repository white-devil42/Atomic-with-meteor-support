/*
 * This file is part of the atomic client distribution.
 * Copyright (c) 2021-2021 0x150.
 */

package me.zeroX150.atomic.feature.module.impl.exploit;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.Module;
import me.zeroX150.atomic.feature.module.ModuleType;
import me.zeroX150.atomic.feature.module.config.MultiValue;
import me.zeroX150.atomic.feature.module.config.SliderValue;
import me.zeroX150.atomic.helper.event.EventType;
import me.zeroX150.atomic.helper.event.Events;
import me.zeroX150.atomic.helper.event.events.PacketEvent;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.Packet;
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayPongC2SPacket;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {

    final List<PacketEntry> entries    = new ArrayList<>();
    final List<Packet<?>>   dontRepeat = new ArrayList<>();
    final SliderValue       delay      = (SliderValue) this.config.create("Delay in MS", 50, 0, 1000, 0).description("The amount of ms to delay packets by");
    // keepalives have an id parameter
    // means, if we delay a keepalive, the id we want to send in response to the server
    // sending us the id will be off sync by n millis
    // -> server thinks network has lag (x+n ms, x being actual network lag), but we don't actually have network lag
    // -> server gets trolled
    final MultiValue        mode       = (MultiValue) this.config.create("Mode", "Delay everything", "Delay everything", "Delay pong")
            .description("What mode to use. Delay everything actually increases C2S lag, Delay pong fakes it.");

    public PingSpoof() {
        super("PingSpoof", "spoofs pings", ModuleType.EXPLOIT);
        Events.registerEventHandler(EventType.PACKET_SEND, event1 -> {
            if (!this.isEnabled()) {
                return;
            }
            PacketEvent event = (PacketEvent) event1;
            if (!dontRepeat.contains(event.getPacket()) && shouldDelayPacket(event.getPacket())) {
                event.setCancelled(true);
                entries.add(new PacketEntry(event.getPacket(), delay.getValue(), System.currentTimeMillis()));
            } else {
                dontRepeat.remove(event.getPacket());
            }
        });
    }

    boolean shouldDelayPacket(Packet<?> p) {
        if (mode.getValue().equalsIgnoreCase("delay everything")) {
            return true; // if we want to delay everything, say yes
        } else {
            return p instanceof PlayPongC2SPacket || p instanceof KeepAliveC2SPacket; // if we want to fake it, say yes if its a pong or keepalive
        }
    }

    @Override public void tick() {
    }

    @Override public void enable() {
        entries.clear();
        dontRepeat.clear();
    }

    @Override public void disable() {

    }

    @Override public String getContext() {
        return delay.getValue() + " ms";
    }

    @Override public void onWorldRender(MatrixStack matrices) {

    }

    @Override public void onHudRender() {

    }

    @Override public void onFastTick_NWC() {
        if (Atomic.client.getNetworkHandler() == null) {
            setEnabled(false);
            return;
        }
        long c = System.currentTimeMillis();
        for (PacketEntry entry : entries.toArray(new PacketEntry[0])) {
            if (entry.entryTime + entry.delay <= c) {
                dontRepeat.add(entry.packet);
                entries.remove(entry);
                Atomic.client.getNetworkHandler().sendPacket(entry.packet);
            }
        }
    }

    record PacketEntry(Packet<?> packet, double delay, long entryTime) {

    }
}

